name: On-Premise Pipeline

on:
  push:
    branches:
      - dev
  workflow_dispatch:

jobs:
  on-prem:
    name: On-Premise CI on Self-Hosted Runner
    runs-on: self-hosted

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Verificar/Instalar Python 3.11
        shell: powershell
        run: |
          $python = Get-Command python3.11 -ErrorAction SilentlyContinue
          if ($python) {
            Write-Host "✅ Python 3.11 já está instalado: $(python3.11 --version)"
          } else {
            Write-Host "⚠️ Python 3.11 não encontrado. Instalando com setup-python..."
            "python-version=3.11" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            "needs_python_install=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }

      - name: Configurar Python com setup-python
        if: env.needs_python_install == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Criar e ativar ambiente virtual, instalar dependências
        shell: powershell
        working-directory: ./api
        run: |
          if (-Not (Test-Path ".venv")) {
            python -m venv .venv
          }

          .\.venv\Scripts\Activate.ps1

          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Rodar testes com pytest
        shell: powershell        
        working-directory: ./api
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest -v ../tests/


      - name: Build das imagens com Docker Compose
        shell: powershell
        run: |
          docker-compose build


      - name: Subir cluster on-prem
        shell: powershell
        run: |
          $bash = 'C:\Program Files\Git\bin\bash.exe'
          $script = '${{ github.workspace }}\local_dev.sh'

          Write-Host "Iniciando script em background..."
          $process = Start-Process $bash -ArgumentList $script -NoNewWindow -RedirectStandardOutput "output.log" -RedirectStandardError "error.log" -PassThru

          Write-Host "Monitorando saída..."
          $found = $false
          $ngrokUrl = ""

          while (-not $found -and !$process.HasExited) {
              Get-Content output.log -Tail 10 | ForEach-Object {
                  if ($_ -match "\[INFO\] Você verá um link HTTPS para acessar sua aplicação!") {
                      $found = $true
                  }
                  # Regex para capturar URL do ngrok (https://xxx.ngrok.io)
                  if ($_ -match "(https://[a-z0-9\-]+\.ngrok\.io)") {
                      $ngrokUrl = $matches[1]
                  }
              }
              Start-Sleep -Seconds 5
          }

          if ($found) {
              Write-Host "Ingress detectado! Link ngrok: $ngrokUrl"
              Write-Host "Aguardando 2 minutos para estabilidade..."
              Start-Sleep -Seconds 120

              $health = Invoke-WebRequest -Uri http://localhost:8000/health -UseBasicParsing -TimeoutSec 10
              if ($health.StatusCode -eq 200) {
                  Write-Host "Aplicação respondeu com sucesso!"
              } else {
                  Write-Error "Healthcheck falhou com status $($health.StatusCode)"
                  exit 1
              }

              # Finaliza o processo do script
              Write-Host "Finalizando script local_dev.sh..."
              Stop-Process -Id $process.Id -Force
          } else {
              Write-Error "Mensagem de finalização não foi encontrada no output do script"
              Stop-Process -Id $process.Id -Force
              exit 1
          }
