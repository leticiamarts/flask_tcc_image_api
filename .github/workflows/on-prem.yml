name: On-Premise Pipeline

on:
  push:
    branches:
      - dev
  workflow_dispatch:

jobs:
  on-prem:
    name: On-Premise CI on Self-Hosted Runner
    runs-on: self-hosted

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Verificar/Instalar Python 3.11
        shell: powershell
        run: |
          $python = Get-Command python3.11 -ErrorAction SilentlyContinue
          if ($python) {
            Write-Host "Python 3.11 já está instalado: $(python3.11 --version)"
          } else {
            Write-Host "Python 3.11 não encontrado. Instalando com setup-python..."
            "python-version=3.11" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            "needs_python_install=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }

      - name: Configurar Python com setup-python
        if: env.needs_python_install == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Criar e ativar ambiente virtual, instalar dependências
        shell: powershell
        working-directory: ./api
        run: |
          if (-Not (Test-Path ".venv")) {
            python -m venv .venv
          }

          .\.venv\Scripts\Activate.ps1

          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Rodar testes com pytest
        shell: powershell        
        working-directory: ./api
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest -v ../tests/

      #- name: Build das imagens com Docker Compose
      #  shell: powershell
      #  run: |
      #    docker-compose build

      - name: Subir cluster on-prem
        shell: powershell
        run: |
          $bash = 'C:\Program Files\Git\bin\bash.exe'
          $script = '${{ github.workspace }}\local_dev.sh'

          Write-Host "Iniciando script local_dev.sh..."
          $process = Start-Process $bash -ArgumentList $script -NoNewWindow -RedirectStandardOutput "output.log" -RedirectStandardError "error.log" -PassThru

          Write-Host "Aguardando 60s para cluster e ingress subirem..."
          Start-Sleep -Seconds 60

          Write-Host "Iniciando ngrok como daemon..."
          Start-Process ngrok.exe -ArgumentList "start flask --log=stdout --log-level=info" -NoNewWindow -PassThru

          Write-Host "Aguardando 30s para ngrok iniciar completamente..."
          Start-Sleep -Seconds 30

          # Captura URL do ngrok pelo endpoint HTTP
          try {
              $tunnels = Invoke-RestMethod http://127.0.0.1:4040/api/tunnels
              $ngrokUrl = $tunnels.tunnels[0].public_url
              Write-Host "Link ngrok capturado: $ngrokUrl"
          } catch {
              Write-Error "Não foi possível capturar a URL do ngrok. Verifique se ngrok iniciou corretamente."
              Stop-Process -Id $process.Id -Force
              exit 1
          }

          Write-Host "Aguardando 2 minutos para estabilidade..."
          Start-Sleep -Seconds 120

          $health = Invoke-WebRequest -Uri http://localhost:8000/health -UseBasicParsing -TimeoutSec 10
          if ($health.StatusCode -eq 200) {
              Write-Host "Aplicação respondeu com sucesso!"
          } else {
              Write-Error "Healthcheck falhou com status $($health.StatusCode)"
              Stop-Process -Id $process.Id -Force
              exit 1
          }

          Write-Host "Finalizando script local_dev.sh..."
          Stop-Process -Id $process.Id -Force
